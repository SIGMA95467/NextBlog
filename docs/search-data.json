[
    
    
    
        
            {
                "id": 0,
                "href": "https://sigma95467.github.io/NextBlog/about/",
                "title": "About",
                "section": "",
                "date" : "2022.03.30",
                "body": "自学图形学中……\n"
            }
    
        ,
            {
                "id": 1,
                "href": "https://sigma95467.github.io/NextBlog/posts/%E7%AC%94%E8%AE%B0ue4%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E5%9F%BA%E7%A1%80/",
                "title": "[笔记]UE4实时渲染基础",
                "section": "posts",
                "date" : "2022.03.25",
                "body": "基础知识 可延展性 在应用程序运行时改变画面渲染效果，提升或者降低帧率等，可使应用移植到不同设备上。\n延迟渲染和前向渲染  游戏大作一般用延迟渲染，手机、VR一般用前向渲染 前向渲染支持MSAA，而延迟渲染只能用TAA（会在画面中看到重影） 延迟渲染需要用到G-Buffer，包含渲染管线后期需要的所有信息  实时渲染性能 CPU渲染：\n 处理场景、应用中的位置、旋转、变换 计算动画、物理效果、碰撞、人工智能 确定程序运行期间对象生成与销毁  GPU渲染：\n 光照、模型自身的渲染、反射、着色器  两种渲染是同时发生的\n像素着色器的开销  每加一层半透明效果就要重新计算像素颜色，每个材质都会添加要与其后像素混合的新图层。 屏幕上需要着色的像素数量。在远处时，屏幕需要着色着色像素较少，开销更小。  场景渲染方式 引擎不会逐像素渲染，而是逐对象渲染，一个接一个模型渲染，逐渐渲染出整幅画面。\n引擎以drawcall为单位进行渲染，渲染开销不取决于多边形数量，而是drawcall的次数，例如彩色低模雕像（有多种材质，每种材质都意味着一次drawcall）的drawcall比高模雕像更多\n动态阴影 动态阴影会随着场景多变形数量增多而产生更大开销，如果使用大量动态光照就需要注意场景中的多边形数量对性能的影响。\n"
            }
    
]
